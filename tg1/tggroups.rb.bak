#!/usr/bin/env ruby
# 
=begin
                ===============================================
                              OpenTG BBS Project
                        Copyright (C) 2008  Chris Tusa
                http://www.opentg.org | telnet://bbs.opentg.org
                ===============================================


---[ License & Distribution ]------------------------------------------------

OpenTG is distributed under the GNU General Public License version 3 (GPLv3)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


---[ File Info ]-------------------------------------------------------------

 Source File: tggroups.rb
     Version: 0.02
   Author(s): Chris Tusa <chris.tusa@opentg.org>
 Description: Group Handling Routines


---[ Changelog ]-------------------------------------------------------------



---[ TODO Items ]------------------------------------------------------------

=end
#

require 'tgusers.rb'

class Group

attr_accessor :cfgin, :cfg, :dbquery, :newvalue, :clearline, :popupmenu,
	:gid, :name, :permissions, :members,	:curgid, :totalgids, :ncstartrow,
	:ncstartcol, :select, :selectrange, 
	:allowlogin, :readmail, :sendmail, :readpost, :writepost, :pagesysop,
	:chat, :downloads, :uploads, :extprogs, :filesarea, :msgsarea,
	:admin_all, :admin_system, :admin_files, :admin_msgs, :admin_users,
	:admin_groups, :admin_chat, :admin_extprogs, :admin_mail

	def initialize
		cfg = TGconfig.new
		@cfgin = cfg.load
	 end

	# GLOBAL CONFIG EDITOR FOR GROUPS
def cfgeditor

	# SQL ITEMS
	submenuloop = 1
	curgid = 1
	dbc = DBI.connect("DBI:#{@cfgin.db_driver}:#{@cfgin.db_name}:#{@cfgin.db_host}",
									 "#{@cfgin.db_user}", "#{@cfgin.db_pass}")

	i = 0	# Array iterator
	submenuloop = 1
	while submenuloop > 0

		gidindex = dbc.select_all "SELECT gid FROM groups ORDER BY gid;"
		totalgids = gidindex.length
		lastgid = totalgids - 1
		curgid = gidindex[i]
		viewindex = i + 1



		# Get current group data
		dbquery = dbc.execute "SELECT  gid, name, description FROM groups WHERE gid = '#{curgid}'"
		 while row = dbquery.fetch do
     			gid 		= row[0]
				name 		= row[1]
				description = row[2]
   		end
		dbquery.finish
		# Get total number of GIDs in DB
		dbquery = dbc.execute "SELECT COUNT(gid) FROM groups"
			while row = dbquery.fetch do
				totalgids = row[0]
			end
		dbquery.finish
		# Get number of members in group
		dbquery = dbc.execute "SELECT COUNT(*) as members FROM users WHERE gid = '#{curgid}'; "
			while row = dbquery.fetch do
				members = row[0]
			end
		dbquery.finish
		dbquery = dbc.execute "SELECT allowlogin, readmail, sendmail, msgsarea, readpost,	writepost, pagesysop, chat, filesarea, downloads, uploads, extprogs, admin_all, admin_system, admin_files, admin_msgs, admin_users,	admin_groups, admin_chat, admin_extprogs, admin_mail FROM permissions WHERE gid = '#{curgid}'; "
		while row = dbquery.fetch do
				allowlogin 		= row['allowlogin']
				readmail 		= row['readmail']
				sendmail 		= row['sendmail']
				msgsarea			= row['msgsarea']
				readpost 		= row['readpost']
				writepost 		= row['writepost']
				pagesysop 		= row['pagesysop']
				chat 				= row['chat']
				filesarea		= row['filesarea']
				downloads		= row['downloads']
				uploads			= row['uploads']
				extprogs			= row['extprogs']
				admin_all		= row['admin_all']
				admin_system	= row['admin_system']
				admin_files		= row['admin_files']
				admin_msgs		= row['admin_msgs']
				admin_users		= row['admin_users']
				admin_groups	= row['admin_groups']
				admin_chat		= row['admin_chat']
				admin_extprogs	= row['admin_extprogs']
				admin_mail		= row['admin_mail']
			end
		dbquery.finish


	 	newvalue = "" # clear the newvalue variable each loop
		submenu = Ncurses.newwin(23,78,2,1)
		submenu.attron(Ncurses.COLOR_PAIR(8))
		submenu.box(0,0)
		submenu.clear

		# /* DRAW LINES */
	   submenu.mvhline(2,1,0,76)
	   submenu.mvhline(5,1,0,76)
	   submenu.mvhline(20,1,0,76)
	   submenu.mvvline(6,25,0,12)
	   submenu.mvvline(6,52,0,12)
		submenu.attroff(Ncurses.COLOR_PAIR(1))



		# /* MENU HEADER */
	 	submenu.attron(Ncurses.COLOR_PAIR(5))
	 	submenu.attron(Ncurses.COLOR_PAIR(7))
		clearline = " " * 76
		submenu.mvaddstr(1, 1, "#{clearline}")
	 	submenu.mvaddstr(1, 3, "Groups Permission Editor \t\t\tViewing [#{viewindex} / #{totalgids}]   GID#: #{curgid}")
	 	submenu.attroff(Ncurses.COLOR_PAIR(7))

		# /* START BOLDING */
	 	submenu.attron(Ncurses::A_BOLD)
		# /* MEMBERS COLOR OFFSET */
		submenu.attron(Ncurses.COLOR_PAIR(5))
		submenu.mvaddstr(3,35, "Members:")
		submenu.attroff(Ncurses.COLOR_PAIR(5))

		# /* UPPER MENU IEMS */
 		submenu.attron(Ncurses.COLOR_PAIR(1))
		submenu.mvaddstr(3,2, "0. Group:")
		submenu.mvaddstr(3,50, "%. New User Default:")
		submenu.mvaddstr(4,2, "1. Descr:")

		# /* MIDDLE MENU LINE HEADER */
		submenu.mvaddstr(5,28, "[                    ]")
	 	submenu.attron(Ncurses::A_REVERSE)
		submenu.mvaddstr(5,29, " Toggle Permissions ")
	 	submenu.attroff(Ncurses::A_REVERSE)

		# /* COL 1 MENU ITEMS */
		submenu.mvaddstr(6,2, "2. Allow login:")
		submenu.mvaddstr(7,2, "3. Page sysop :")
		submenu.mvaddstr(8,2, "4. User chat  :")
		submenu.mvaddstr(9,2, "5. Read E-mail:")
		submenu.mvaddstr(10,2,"6. Send E-mail:")
		submenu.mvaddstr(11,2,"7. Msgs Areas :")
		submenu.mvaddstr(12,2,"8. Read  Posts:")
		submenu.mvaddstr(13,2,"9. Write Posts:")
		submenu.mvaddstr(14,2,"A. File Areas :")
		submenu.mvaddstr(15,2,"B. U/L allowed:")
		submenu.mvaddstr(16,2,"C. D/L allowed:")
		# /* COL 2 MENU ITEMS */
		submenu.mvaddstr(6,27, "D. Run Ext Prog:")
		submenu.mvaddstr(7,27, "E. ")
		submenu.mvaddstr(8,27, "F. ")
		submenu.mvaddstr(9,27, "G. ")
		submenu.mvaddstr(10,27,"H. ")
		submenu.mvaddstr(11,27,"I. ")
		submenu.mvaddstr(12,27,"J. ")
		submenu.mvaddstr(13,27,"K. ")
		submenu.mvaddstr(14,27,"L. Time Limit  :")
		submenu.mvaddstr(15,27,"M. Max Timebank:")
		submenu.mvaddstr(16,27,"N. Max Credits :")
		# /* COL 3 MENU ITEMS */
		submenu.mvaddstr(6,54, "O. Admin All   :")
		submenu.mvaddstr(7,54, "P. Admin  Sys  :")
		submenu.mvaddstr(8,54, "Q. Admin Msgs  :")
		submenu.mvaddstr(9,54, "R. Admin Files :")
		submenu.mvaddstr(10,54,"S. Admin Users :")
		submenu.mvaddstr(11,54,"T. Admin Groups:")
		submenu.mvaddstr(12,54,"U. Admin Chat  :")
		submenu.mvaddstr(13,54,"V. Admin Progs :")
		submenu.mvaddstr(14,54,"W. Admin Email :")
		submenu.mvaddstr(15,54,"Y. ")
		submenu.mvaddstr(16,54,"Z. ")

		# /* LOWER MENU ITEMS */
	   submenu.mvhline(17,1,0,76)
		submenu.mvaddstr(18,2,"]. Next GID")
		submenu.mvaddstr(19,2,"[. Prev GID")
		submenu.mvaddstr(18,20, "+. Add new Group")
		submenu.mvaddstr(19,20, "-. Delete  Group")
#		submenu.mvaddstr(18,38, "*. List Members")
#		submenu.mvaddstr(19,38, " . ")
#		submenu.mvaddstr(18,59, "_. ")
		submenu.mvaddstr(19,59, "X. Exit Editor")
		# /* END MENU ITEMS COLORING */
 		submenu.attroff(Ncurses.COLOR_PAIR(1))

		# /* MENU PROMPT */
	 	submenu.attron(Ncurses.COLOR_PAIR(6))
	   submenu.mvaddstr(21, 2, "Selection [0-9,A-X] :")
	   submenu.attroff(Ncurses.COLOR_PAIR(6))

		# /* VALUES COLORING START */
    	submenu.attron(Ncurses.COLOR_PAIR(3))
		# /* VALUES UPPER */
	 	submenu.mvaddstr(3, 12, "#{name.upcase}") unless name.nil?
	 	submenu.mvaddstr(3, 44, "#{members}") 		unless members.nil?
	 	submenu.mvaddstr(4, 12, "#{description}") unless description.nil?
		# /* VALUES COL 1 */
	 	submenu.mvaddstr(6, 18, "#{allowlogin}")
	 	submenu.mvaddstr(7, 18, "#{pagesysop}")
	 	submenu.mvaddstr(8, 18, "#{chat}")
	 	submenu.mvaddstr(9, 18, "#{readmail}")
	 	submenu.mvaddstr(10, 18, "#{sendmail}")
	 	submenu.mvaddstr(11, 18, "#{msgsarea}")
	 	submenu.mvaddstr(12, 18, "#{readpost}")
	 	submenu.mvaddstr(13, 18, "#{writepost}")
	 	submenu.mvaddstr(14, 18, "#{filesarea}")
	 	submenu.mvaddstr(15, 18, "#{uploads}")
	 	submenu.mvaddstr(16, 18, "#{downloads}")
		# /* VALUES COL 2 */
	 	submenu.mvaddstr(6, 45, "#{extprogs}")
#	 	submenu.mvaddstr(7, 48, "")
#	 	submenu.mvaddstr(8, 48, "#{}")
#	 	submenu.mvaddstr(9, 48, "#{}")
#	 	submenu.mvaddstr(10, 48, "#{}")
#	 	submenu.mvaddstr(11, 48, "#{}")
#	 	submenu.mvaddstr(12, 48, "#{}")
#	 	submenu.mvaddstr(13, 48, "#{}")
#	 	submenu.mvaddstr(14, 48, "#{}")
#	 	submenu.mvaddstr(15, 48, "#{}")

		# /* VALUES COL 3 */
		if curgid == @cfgin.default_gid
		 submenu.mvaddstr(3, 71, "*YES*") 
		else
		 submenu.mvaddstr(3, 71, "NO") 
		end
	 	submenu.mvaddstr(6, 71, "#{admin_all}")
	 	submenu.mvaddstr(7, 71, "#{admin_system}")
	 	submenu.mvaddstr(8, 71, "#{admin_msgs}")
	 	submenu.mvaddstr(9, 71, "#{admin_files}")
	 	submenu.mvaddstr(10, 71, "#{admin_users}")
	 	submenu.mvaddstr(11, 71, "#{admin_groups}")
	 	submenu.mvaddstr(12, 71, "#{admin_chat}")
	 	submenu.mvaddstr(13, 71, "#{admin_extprogs}")
	 	submenu.mvaddstr(14, 71, "#{admin_mail}")
#	 	submenu.mvaddstr(15, 71, "#{}")
#	 	submenu.mvaddstr(16, 71, "#{}")
    	submenu.attroff(Ncurses.COLOR_PAIR(3))

		# /* PROMPT COLORING START */
		submenu.attron(Ncurses.COLOR_PAIR(2))
		submenu.mvaddstr(21, 24, " ")
		submenu.mvaddstr(21, 24, "")
		submenu.refresh
		submenuitem = submenu.getch()
	   case submenuitem
			when 'x'[0], 'X'[0]
			submenuloop = 0

			when ']'[0] # Next UID
				unless i >= lastgid
					i = i + 1 
		 		else
					i = 0
		 		end
		 		curgid = gidindex[i]
			when '['[0] # Prev UID
		 		unless i <= 0
					i = i - 1 
		 		else
					i = lastgid
		 		end
		 		curgid = gidindex[i]

		when '%'[0] # Set group as new user default
				@cfgin.default_gid = curgid
#		when '*'[0] # List members of this group

		when '-'[0] # Delete Group
			unless "#{curgid}" == "1" # cannot delete the first area - its required
			popuploop = 1
				while popuploop > 0
					popupmenu = Ncurses.newwin(5,54,10,12)
					popupmenu.box(0,0)
					popupmenu.clear
					popupmenu.mvaddstr(0,3, "[ Confirm Group Delete ]")
 					popupmenu.attron(Ncurses.COLOR_PAIR(3))
		 	      popupmenu.attron(Ncurses::A_BOLD)
					popupmenu.mvaddstr(2,2, "This group has #{members} members. Are you sure?")
					popupmenu.mvaddstr(3,2, "You will need to choose a migration group.") if members.to_i > 0 
					popupmenu.attron(Ncurses.COLOR_PAIR(6))
					popupmenu.mvaddstr(4, 43, "[ y/N:  ]")
					popupmenu.attron(Ncurses.COLOR_PAIR(2))
	 				popupmenu.mvaddstr(4, 50, " ")
	 				popupmenu.mvaddstr(4, 50, "")
		 	      popupmenu.attroff(Ncurses::A_BOLD)
					popupmenu.refresh
						case(popupmenu.getch())
						 	when 'y'[0], 'Y'[0]
									dbquery = dbc.execute("DELETE FROM groups WHERE gid = '#{curgid}';")
									dbquery = dbc.execute("DELETE FROM permissions WHERE gid = '#{curgid}';")
								if members.to_i > 0 
											# BUG TODO: No checks, doesnt work well
											replacement_gid = self.select(curgid)
									dbquery = dbc.execute("UPDATE users SET gid = '#{replacement_gid}' WHERE gid = '#{curgid}';")
								end
									dbquery.finish

								unless i <= 0  # When completed go to the previous user
									i = i - 1 
								else
									i = lastgid
								end
								popuploop = 0
							# TODO: Ask if we want to send a final email to user
							when 'n'[0], 'N'[0]
								popuploop = 0
						end
				end # END WHILE
				popupmenu.delwin
			end # END UNLESS
		when '+'[0] # Add Blank Group
			# Adding simply adds a blank entry with the next available uid
			idx = 0
			sdx = 1 
			scangids = []
			availgids = []
			gidindex.each do |gidvalue|
				scangids << "#{gidvalue}"
				unless scangids[idx].to_i == sdx
					availgids << sdx
				end
				sdx = sdx + 1
				idx = idx + 1
			end
			# If the sequential UID check turns out nil, we add one to the end
			unless availgids.empty?
				newgid = availgids[0]
			else
				newgid = totalgids + 1
			end
			unless newgid >= 10
			# populate default perms for new group creation
			dbquery = dbc.execute("INSERT INTO groups(gid) VALUES(#{newgid});")
			dbquery.finish
			dbquery = dbc.execute("SELECT * FROM permissions WHERE gid = '#{@cfgin.default_gid}'")
			while row = dbquery.fetch do
				new_allowlogin 	= row['allowlogin']
				new_readmail 		= row['readmail']
				new_sendmail 		= row['sendmail']
				new_msgsarea		= row['msgsarea']
				new_readpost 		= row['readpost']
				new_writepost 		= row['writepost']
				new_pagesysop 		= row['pagesysop']
				new_chat 			= row['chat']
				new_filesarea		= row['filesarea']
				new_downloads		= row['downloads']
				new_uploads			= row['uploads']
				new_extprogs		= row['extprogs']
				new_admin_all		= row['admin_all']
				new_admin_system	= row['admin_system']
				new_admin_files	= row['admin_files']
				new_admin_msgs		= row['admin_msgs']
				new_admin_users	= row['admin_users']
				new_admin_groups	= row['admin_groups']
				new_admin_chat		= row['admin_chat']
				new_admin_extprogs= row['admin_extprogs']
				new_admin_mail		= row['admin_mail']
			end	
			dbquery.finish

			dbquery = dbc.execute("INSERT INTO permissions(gid,allowlogin, readmail, sendmail, msgsarea, readpost, writepost, pagesysop, chat, filesarea, downloads, uploads, extprogs, admin_all, admin_system, admin_files, admin_msgs, admin_users, admin_groups, admin_chat, admin_extprogs, admin_mail) VALUES('#{newgid}', #{new_allowlogin}, #{new_readmail}, #{new_sendmail}, #{new_msgsarea}, #{new_readpost},	#{new_writepost}, #{new_pagesysop}, #{new_chat}, #{new_filesarea}, #{new_downloads}, #{new_uploads}, #{new_extprogs}, #{new_admin_all}, #{new_admin_system}, #{new_admin_files}, #{new_admin_msgs}, #{new_admin_users}, #{new_admin_groups}, #{new_admin_chat}, #{new_admin_extprogs}, #{new_admin_mail})")

			dbquery.finish
			i = newgid - 1
			end


		when '0'[0] # Group Name
			 clearline = " " * 16
			 submenu.mvaddstr(3, 12, "#{clearline}")
			 submenu.move(3,12)
	  		 submenu.getstr(newvalue)
				unless newvalue.empty?
					name = newvalue
					dbquery = dbc.execute("UPDATE groups SET name = '#{name}' WHERE gid = '#{curgid}'")
					dbquery.finish
				end
		when '1'[0] # Group Description
			 clearline = " " * 58
			 submenu.mvaddstr(4, 12, "#{clearline}")
			 submenu.move(4,12)
	  		 submenu.getstr(newvalue)
				unless newvalue.empty?
					description = newvalue
					dbquery = dbc.execute("UPDATE groups SET description = '#{description}' WHERE gid = '#{curgid}'")
					dbquery.finish
				end
		when '2'[0] # RBAC Allow Login
			if allowlogin == true
				allowlogin = false
			else
				allowlogin = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET allowlogin = '#{allowlogin}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '3'[0] # RBAC Page Sysop
			if pagesysop == true
				pagesysop = false
			else
				pagesysop = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET pagesysop = '#{pagesysop}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '4'[0] # RBAC User Chat
			if chat == true
				chat = false
			else
				chat = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET chat = '#{chat}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '5'[0] # RBAC Read Mail
			if readmail == true
				readmail = false
			else
				readmail = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET readmail = '#{readmail}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '6'[0] # RBAC Send Mail
			if sendmail == true
				sendmail = false
			else
				sendmail = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET sendmail = '#{sendmail}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '7'[0], '7'[0] # RBAC Access Message Areas
			if msgsarea == true
				msgsarea = false
			else
				msgsarea = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET msgsarea = '#{msgsarea}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '8'[0] # RBAC Read Posts
			if readpost == true
				readpost = false
			else
				readpost = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET readpost = '#{readpost}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when '9'[0] # RBAC Write Posts
			if writepost == true
				writepost = false
			else
				writepost = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET writepost = '#{writepost}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'a'[0], 'A'[0] # RBAC Access File Areas
			if filesarea == true
				filesarea = false
			else
				filesarea = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET filesarea = '#{filesarea}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'b'[0], 'B'[0] # RBAC Upload Files
			if uploads == true
				uploads = false
			else
				uploads = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET uploads = '#{uploads}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'c'[0], 'C'[0] # RBAC Download Files
			if downloads == true
				downloads = false
			else
				downloads = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET downloads = '#{downloads}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'd'[0], 'D'[0] # RBAC External Programs
			if extprogs == true
				extprogs = false
			else
				extprogs = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET extprogs = '#{extprogs}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'o'[0], 'O'[0] # RBAC Admin All
			if admin_all == true
				admin_all = false
			else
				admin_all = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_all = '#{admin_all}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'p'[0], 'P'[0] # RBAC Admin System
			if admin_system == true
				admin_system = false
			else
				admin_system = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_system = '#{admin_system}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'q'[0], 'Q'[0] # RBAC Admin Message Areas
			if admin_msgs == true
				admin_msgs = false
			else
				admin_msgs = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_msgs = '#{admin_msgs}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'r'[0], 'R'[0] # RBAC Admin File Areas
			if admin_files == true
				admin_files = false
			else
				admin_files = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_files = '#{admin_files}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 's'[0], 'S'[0] # RBAC Admin Users
			if admin_users == true
				admin_users = false
			else
				admin_users = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_users = '#{admin_users}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 't'[0], 'T'[0] # RBAC Admin Groups
			if admin_groups == true
				admin_groups = false
			else
				admin_groups = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_groups = '#{admin_groups}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'u'[0], 'U'[0] # RBAC Admin Chat
			if admin_chat == true
				admin_chat = false
			else
				admin_chat = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_chat = '#{admin_chat}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'v'[0], 'V'[0] # RBAC Admin External Programs
			if admin_extprogs == true
				admin_extprogs = false
			else
				admin_extprogs = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_extprogs = '#{admin_extprogs}' WHERE gid = '#{curgid}'")
			dbquery.finish
		when 'w'[0], 'W'[0] # RBAC Admin Mail System
			if admin_mail == true
				admin_mail = false
			else
				admin_mail = true
			end 
			dbquery = dbc.execute("UPDATE permissions SET admin_mail = '#{admin_mail}' WHERE gid = '#{curgid}'")
			dbquery.finish
		else
		end # end case	
		#dbquery.finish
	end # end while
	dbc.disconnect
	submenu.delwin
	return "#{@cfgin.default_gid}".to_i
end # end dev

#end

	# Group Select menu - for USER'S MENU
	def select(curgid)
	#BUG TODO: This is a very buggy and poorly written routine. Fix

	 	dbc = DBI.connect("DBI:#{@cfgin.db_driver}:#{@cfgin.db_name}:#{@cfgin.db_host}",
									 "#{@cfgin.db_user}", "#{@cfgin.db_pass}")

		# Get total number of groups
		dbquery = dbc.execute "SELECT COUNT(gid) FROM groups"
			while row = dbquery.fetch do
				totalgids = row[0]
			end

			popuploop = 1
				while popuploop > 0
					ncrow = 1
					ncstartcol = 2
					popupmenu = Ncurses.newwin(13,45,4,17)
					popupmenu.box(0,0)
#					popupmenu.mvhline(13,1,0,23)
					popupmenu.clear
					popupmenu.mvaddstr(0,3, "[ Select New Group ]")
 					popupmenu.attron(Ncurses.COLOR_PAIR(3))
		 	      popupmenu.attron(Ncurses::A_BOLD)
					# Get current group data
						dbquery = dbc.execute "SELECT gid, name FROM groups"
						dbquery.fetch_hash do |row|
							unless "#{row['gid']}" == "#{curgid}"
					   	 popupmenu.mvaddstr(ncrow,2, "#{row['gid']}. #{row['name']}")
							else
					   	 popupmenu.mvaddstr(ncrow,2, "#{row['gid']}. #{row['name']} (CURRENT)")
							end
					  	   ncrow = ncrow + 1
						end
						dbquery.finish
					popupmenu.attron(Ncurses.COLOR_PAIR(6))
					popupmenu.mvaddstr(12, 2, "[1-#{totalgids}, X:   ]")
					popupmenu.attron(Ncurses.COLOR_PAIR(2))
	 				popupmenu.mvaddstr(12, 11, " ")
	 				popupmenu.mvaddstr(12, 11, "")
		 	      popupmenu.attroff(Ncurses::A_BOLD)
					popupmenu.refresh

						case(popupmenu.getch())
						# TODO: There a more dynamic way to do this, but need to get something working for now
						 	when '1'[0]
								gid = 1
								popuploop = 0
							when '2'[0]
								gid = 2
								popuploop = 0
							when '3'[0]
								gid = 3
								popuploop = 0
							when '4'[0]
								gid = 4
								popuploop = 0
							when '5'[0]
								gid = 5
								popuploop = 0
							when '6'[0]
								gid = 6
								popuploop = 0
							when '7'[0]
								gid = 7
								popuploop = 0
							when '8'[0]
								gid = 8
								popuploop = 0
							when '9'[0]
								gid = 6
								popuploop = 0

							when 'x'[0], 'X'[0]
								gid = curgid
								popuploop = 0
						end
				end # End popupmenuloop while
				popupmenu.delwin
				gid
	end # end def 
end