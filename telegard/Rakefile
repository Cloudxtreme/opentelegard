=begin

===============================================================================
                 OpenTG (Telegard/2)  http://www.opentg.org                    
===============================================================================

See "LICENSE" file for distribution and copyright information. 
 
---[ File Info ]-------------------------------------------------------------

 Source File: Rakefile
     Version: 1.00
   Author(s): Chris Tusa <chris.tusa@opentg.org>
 Description: Distributon Rake file used to generate various tasks

-----------------------------------------------------------------------------

=end
require 'rake'
require 'rdoc/task'
$LOAD_PATH.unshift('./bbs')
require 'lib/tgconstants'
require 'lib/tgio'
    
  task :default do
  desc "OpenTG - rake help"
  puts "OpenTG uses ruby's rake facility to automate specific tasks."
  puts "usage:  rake [ns:task]\n"
  puts "Documentation"
  puts "  doc:rdoc          - Build the API documentation"
  puts "\n"
  puts "Database"
  puts "  db:migrate        - Run Sequel DB migration tasks"
  puts "  db:viewconf       - View database configuration"
  puts "  db:testconnect    - Test connection to database"
  puts "\n"
  puts "Installation"
  puts "  install:backup    - Take a backup of /opt/telegard"
  puts "  install:hg        - Install the software from repo checkout"
  end

#==============================================================================
# Documentation Namespace
#==============================================================================

namespace :doc do
  desc "Create documentation"
  Rake::RDocTask.new do |rdoc|
        files = ['README', 'LICENSE',
                 'bbs/**/*.rb', 'doc/**/*.rdoc']
        rdoc.rdoc_files.add(files)
        rdoc.main = 'README'
        rdoc.title = 'OpenTG API rdocs'
        rdoc.rdoc_dir = 'doc/api'
        rdoc.options = [ '--line-numbers' ]
  end
end
#==============================================================================
# Database Namespace  
#==============================================================================
namespace :db do
  # Need to load the configuration file to access the DB

  require "lib/tgconfig.rb"
  cfg = Tgconfig.load

  require 'lib/tgdatabase'
 
  # ----------------------------------   
  desc "Show Database Configuration"
  task :viewconf do
    pp cfg['database']
  end
  
  desc "Reveal Database Password"
  task :viewsapwd do  
    dbpwd = Security::ConfigPassword.new.decrypt(cfg['database']['pass'])
    puts dbpwd
  end  
    
  desc "Test Database Connection"
  task :testconnect do
    begin
      Tgio.printstart "Testing database connection"
        dbconn = Tgdatabase.connect(cfg['database'])
      Tgio.printreturn(0)
    rescue Exception => e
      Tgio.printreturn(1)
        puts e
      exit 1
    end
  end
  
  desc "Run migrations"
  task :migrate, [:version] do |t, args|
    Sequel.extension :migration
    version = args[:version].to_i if args[:version]
    begin
      Tgio.printstart "Running Sequel migrations on database"
        dbconn = Tgdatabase.connect(cfg['database'])
        Sequel::Migrator.run(dbconn, "bbs/db/migrations", target: version)    
      Tgio.printreturn(0)
    rescue Exception => e
      Tgio.printreturn(1)
        puts e
      exit 1
    end
  end

  desc "Run de-migrations"
  task :demigrate do
    Sequel.extension :migration
    begin
      Tgio.printstart "Running Sequel migration to version 0 on database"
        dbconn = Tgdatabase.connect(cfg['database'])
        Sequel::Migrator.run(dbconn, "bbs/db/migrations", target: 0)    
      Tgio.printreturn(0)
    rescue Exception => e
      Tgio.printreturn(1)
        puts e
      exit 1
    end
  end
  
end

#==============================================================================
# Installation Namespace
#==============================================================================

namespace :install do
  desc "Take a backup of the current installation"
  task :backup do
    backupdir = '/opt/telegard_backups'
    timestamp = Time.now.to_i
    mkdir_p backupdir
    sh "tar -cvf #{backupdir}/#{timestamp}.tar /opt/telegard"
#    sourcefiles = Rake::FileList.new("/opt/telegard/**/**")
#    sourcefiles.exclude("/opt/telegard/rake_backups")
#    sourcefiles.each do |srcfile|
#      #puts file.inspect
#      tgtfile = srcfile.sub("/opt/telegard", "/opt/telegard/rake_backups")
#      cp srcfile, tgtfile, :verbose => true
#    end
  end  
  
  desc "Install the distribution from developer checkout"
  task :hg do
    sh "cp -av * /opt/telegard"
  end
end

#==============================================================================
