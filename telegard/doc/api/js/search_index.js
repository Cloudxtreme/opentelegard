var search_data = {"index":{"searchIndex":["apachecommonslang","apachecommonsvalidator","bbslistcontroller","callhistorycontroller","chatcontroller","chatroomcontroller","emailcontroller","falseclass","fileareacontroller","filecontroller","group","helpcontroller","integer","jexec","jline","jasyptpbe","jasyptsalt","jasypttext","javaio","javalang","javautil","maincontroller","messagecontroller","msgareacontroller","network","object","security","config","configpassword","userpassword","session","string","telegard","tgbbslist","tgcallhistory","tgchatroom","tgconfig","tgcontroller","tgdatabase","tgemailinbox","tgextprogs","tgfile","tgfilearea","tgio","dates","input","output","pager","tgedit","nano","telegard","tglogin","signup","tgmsg","tgmsgarea","tgtemplate","fm","template","timebankcontroller","trueclass","user","usercontroller","activated_by?()","add()","ansiclear()","ansiprint()","askaddress1()","askaddress2()","askbday()","askcity()","askcountry()","askcustom()","askemail()","askfirstname()","askgender()","askhint()","asklastname()","asklogin()","askpassword()","askphone()","askpostal()","askpwhint_answer()","askpwhint_question()","askstate()","auth()","authorize()","banner()","banner()","browse()","clearfailed()","confirm()","connect()","countlogin()","cryptpassword()","cryptpassword()","cryptpassword()","cryptpassword()","days()","decrypt()","default_pager()","display()","edit()","edit()","edit()","encrypt()","exec()","exists?()","getcurgroup()","getcuruser()","getoptions()","getpwentry()","goodbye()","goodbye_fast()","hour()","hours()","inbounds()","inbox_list()","init()","initdb()","inputdate()","inputday()","inputeditline()","inputform()","inputgender()","inputkey()","inputmonth()","inputrow()","inputyear()","inputyn()","is_alpha?()","is_alphanumeric?()","is_blank?()","is_email?()","is_notblank?()","is_numeric?()","is_spaced_alpha?()","is_spaced_alphanumeric?()","is_spaced_numeric?()","is_url?()","is_valid?()","listall()","load()","load_databaseconn()","load_tgconfig()","loadlib_security()","loadlib_tgconfig()","loadlib_tgconstants()","loadlib_tgcontroller()","loadlib_tgdatabase()","loadlib_tgdatabasemodels()","loadlib_tgio()","loadlib_tgtemplate()","loginform()","mainbanner()","makedefault()","makedefault()","maxlength?()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menu()","menuprompt()","minlength?()","minutes()","navigator()","new()","new()","new()","new()","new()","new()","new()","new()","page()","pagerkey_default()","parse_content()","parse_dataset()","parse_hash()","passwordform()","passwordprompt()","post()","preferences()","preview()","printansifile()","printreturn()","printstart()","question()","quote()","read_msg()","render()","reply()","run_pager()","sec_to_min()","seconds()","select_editor()","setexpiration()","signup()","stringify()","terminaldetect()","test_session()","thisuser_logincount_today()","thisuser_time_today()","timeremain()","toggle()","toggle()","unimplemented()","uninitialize()","uninitialize()","userprompt()","validate()","validatepw()","view()","license","readme"],"longSearchIndex":["apachecommonslang","apachecommonsvalidator","bbslistcontroller","callhistorycontroller","chatcontroller","chatroomcontroller","emailcontroller","falseclass","fileareacontroller","filecontroller","group","helpcontroller","integer","jexec","jline","jasyptpbe","jasyptsalt","jasypttext","javaio","javalang","javautil","maincontroller","messagecontroller","msgareacontroller","network","object","security","security::config","security::configpassword","security::userpassword","session","string","telegard","tgbbslist","tgcallhistory","tgchatroom","tgconfig","tgcontroller","tgdatabase","tgemailinbox","tgextprogs","tgfile","tgfilearea","tgio","tgio::dates","tgio::input","tgio::output","tgio::output::pager","tgio::tgedit","tgio::tgedit::nano","tgio::tgedit::telegard","tglogin","tglogin::signup","tgmsg","tgmsgarea","tgtemplate","tgtemplate::fm","tgtemplate::template","timebankcontroller","trueclass","user","usercontroller","tgio::output::pager#activated_by?()","bbslistcontroller#add()","tgio::ansiclear()","tgio::ansiprint()","tglogin::signup::askaddress1()","tglogin::signup::askaddress2()","tglogin::signup::askbday()","tglogin::signup::askcity()","tglogin::signup::askcountry()","tglogin::signup::askcustom()","tglogin::signup::askemail()","tglogin::signup::askfirstname()","tglogin::signup::askgender()","tglogin::askhint()","tglogin::signup::asklastname()","tglogin::signup::asklogin()","tglogin::signup::askpassword()","tglogin::signup::askphone()","tglogin::signup::askpostal()","tglogin::signup::askpwhint_answer()","tglogin::signup::askpwhint_question()","tglogin::signup::askstate()","tglogin::auth()","user::authorize()","tgio::tgedit::telegard#banner()","tglogin::banner()","messagecontroller#browse()","user::clearfailed()","tglogin::signup::confirm()","tgdatabase::connect()","user::countlogin()","object#cryptpassword()","security::userpassword#cryptpassword()","tglogin::cryptpassword()","user::cryptpassword()","integer#days()","security::configpassword#decrypt()","tgio::output::pager::default_pager()","tgtemplate::display()","tgio::tgedit::edit()","tgio::tgedit::telegard#edit()","usercontroller#edit()","security::configpassword#encrypt()","tgio::tgedit::nano#exec()","user::exists?()","session#getcurgroup()","session#getcuruser()","object#getoptions()","object#getpwentry()","telegard::goodbye()","telegard::goodbye_fast()","integer#hour()","integer#hours()","string#inbounds()","emailcontroller#inbox_list()","telegard::init()","tgdatabase::initdb()","tgio::dates::inputdate()","tgio::dates::inputday()","tgio::input::inputeditline()","tgio::input::inputform()","tgio::input::inputgender()","tgio::input::inputkey()","tgio::dates::inputmonth()","tgio::tgedit::telegard#inputrow()","tgio::dates::inputyear()","tgio::input::inputyn()","string#is_alpha?()","string#is_alphanumeric?()","string#is_blank?()","string#is_email?()","string#is_notblank?()","string#is_numeric?()","string#is_spaced_alpha?()","string#is_spaced_alphanumeric?()","string#is_spaced_numeric?()","string#is_url?()","session#is_valid?()","messagecontroller#listall()","tgconfig::load()","telegard::load_databaseconn()","telegard::load_tgconfig()","telegard::loadlib_security()","telegard::loadlib_tgconfig()","telegard::loadlib_tgconstants()","telegard::loadlib_tgcontroller()","telegard::loadlib_tgdatabase()","telegard::loadlib_tgdatabasemodels()","telegard::loadlib_tgio()","telegard::loadlib_tgtemplate()","tgio::input::loginform()","tgio::mainbanner()","security::config#makedefault()","tgconfig::makedefault()","string#maxlength?()","bbslistcontroller#menu()","callhistorycontroller#menu()","chatcontroller#menu()","chatroomcontroller#menu()","emailcontroller#menu()","fileareacontroller#menu()","filecontroller#menu()","helpcontroller#menu()","maincontroller#menu()","msgareacontroller#menu()","tgio::menu()","timebankcontroller#menu()","usercontroller#menu()","tgio::input::menuprompt()","string#minlength?()","integer#minutes()","emailcontroller#navigator()","callhistorycontroller::new()","filecontroller::new()","messagecontroller::new()","security::configpassword::new()","tgio::output::pager::new()","tgio::tgedit::nano::new()","tgio::tgedit::telegard::new()","tgtemplate::template::new()","tgio::output::pager#page()","tgio::input::pagerkey_default()","tgio::tgedit::nano#parse_content()","tgtemplate::template::parse_dataset()","tgtemplate::template::parse_hash()","tgio::input::passwordform()","tglogin::passwordprompt()","messagecontroller#post()","usercontroller#preferences()","tgio::tgedit::telegard#preview()","tgio::printansifile()","tgio::printreturn()","tgio::printstart()","tgio::question()","messagecontroller#quote()","emailcontroller#read_msg()","tgtemplate::template#render()","messagecontroller#reply()","tgio::run_pager()","integer#sec_to_min()","integer#seconds()","usercontroller#select_editor()","session#setexpiration()","tglogin::signup()","tgtemplate::template#stringify()","tgio::terminaldetect()","tgcontroller#test_session()","tgcallhistory#thisuser_logincount_today()","tgcallhistory#thisuser_time_today()","session#timeremain()","falseclass#toggle()","trueclass#toggle()","telegard::unimplemented()","filecontroller#uninitialize()","messagecontroller#uninitialize()","tglogin::userprompt()","security::userpassword#validate()","user::validatepw()","messagecontroller#view()","",""],"info":[["ApacheCommonsLang","","ApacheCommonsLang.html","",""],["ApacheCommonsValidator","","ApacheCommonsValidator.html","",""],["BBSlistController","","BBSlistController.html","","<p>Help Controller Class\n"],["CallHistoryController","","CallHistoryController.html","","<p>begin rdoc\n<p>CallHistoryController\n<p>The CallHistory menu controller.\n"],["ChatController","","ChatController.html","","<p>begin rdoc\n<p>ChatController\n<p>The Chat Menu controller.\n"],["ChatRoomController","","ChatRoomController.html","","<p>begin rdoc\n<p>ChatRoom Controller\n<p>The Chat Room Controller\n"],["EmailController","","EmailController.html","","<p>begin rdoc\n<p>EmailController\n<p>The Email controller.\n"],["FalseClass","","FalseClass.html","","<p>Extends FalseClass for Boolean Functions\n"],["FileAreaController","","FileAreaController.html","","<p>begin rdoc\n<p>FileAreaController\n<p>The Main Menu master controller.\n"],["FileController","","FileController.html","","<p>begin rdoc\n<p>FileController\n<p>The File controller.\n"],["Group","","Group.html","","<p>Group Structure\n"],["HelpController","","HelpController.html","","<p>Help Controller Class\n"],["Integer","","Integer.html","","<p>Extends fixunum class for some date/time shortcuts.\n"],["JExec","","JExec.html","","<p>LIBC exec call.\n"],["JLine","","JLine.html","",""],["JasyptPBE","","JasyptPBE.html","",""],["JasyptSalt","","JasyptSalt.html","",""],["JasyptText","","JasyptText.html","",""],["JavaIO","","JavaIO.html","","<p>Imports java.io as Ruby::JavaIO\n"],["JavaLang","","JavaLang.html","","<p>Imports java.lang as Ruby::JavaLang\n"],["JavaUtil","","JavaUtil.html","","<p>Imports java.util as Ruby::JavaUtil\n"],["MainController","","MainController.html","","<p>Main Controller Class\n"],["MessageController","","MessageController.html","","<p>begin rdoc\n<p>MessageController\n<p>The Message controller.\n"],["MsgareaController","","MsgareaController.html","","<p>begin rdoc\n<p>MessageAreaController\n<p>The Message Area controller.\n"],["Network","","Network.html","","<p>Network Sequel CLass\n"],["Object","","Object.html","",""],["Security","","Security.html","","<p>begin rdoc\n<p>Security\n<p>Library for common security routines used in Telegard\n"],["Security::Config","","Security/Config.html","","<p>Define the structure of the Configuration File for Security.\n"],["Security::ConfigPassword","","Security/ConfigPassword.html","","<p>Handlers for configuration passwords stored in plaintext yaml files/\n"],["Security::UserPassword","","Security/UserPassword.html","","<p>Handlers for user passwords stored in the database\n"],["Session","","Session.html","","<p>Session Structure\n"],["String","","String.html","","<p>Extend the String Class with validation methods\n"],["Telegard","","Telegard.html","","<p>begin rdoc               \n<p>Telegard (Telegard)\n<p>Telegard is the main Telegard library responsible for initialization …\n"],["Tgbbslist","","Tgbbslist.html","","<p>Chat Room Structure\n"],["Tgcallhistory","","Tgcallhistory.html","","<p>begin\n<p>\n\n<pre>OpenTG (Telegard/2)  http://www.opentg.org</pre>\n"],["Tgchatroom","","Tgchatroom.html","","<p>Chat Room Structure\n"],["Tgconfig","","Tgconfig.html","","<p>begin rdoc               \n<p>Tgconfig (Configuration)\n<p>Tgconfig handles configuration file management Configuration …\n"],["Tgcontroller","","Tgcontroller.html","","<p>Main Controller Class\n"],["Tgdatabase","","Tgdatabase.html","","<p>begin rdoc               \n<p>Tgdatabase (Database)\n<p>Tgdatabase provides the database connectivity and initialization …\n"],["TgemailInbox","","TgemailInbox.html","","<p>Email Structure (must be named Tgemail)\n"],["Tgextprogs","","Tgextprogs.html","","<p>External Programs (DOORS) Structure\n"],["Tgfile","","Tgfile.html","","<p>File Structure (must be named Tgfile - cannot conflict with Ruby\n&#39;File&#39; class\n"],["Tgfilearea","","Tgfilearea.html","","<p>Filearea Structure\n"],["Tgio","","Tgio.html","","<p>begin rdoc               \n<p>Tgio (I/O)\n<p>Tgio provides the common input/output routines for dealing with STDOUT …\n"],["Tgio::Dates","","Tgio/Dates.html","",""],["Tgio::Input","","Tgio/Input.html","",""],["Tgio::Output","","Tgio/Output.html","",""],["Tgio::Output::Pager","","Tgio/Output/Pager.html","","<p>This class provides class methods for paging and an object which can\nconditionally page given a terminal …\n"],["Tgio::Tgedit","","Tgio/Tgedit.html","",""],["Tgio::Tgedit::Nano","","Tgio/Tgedit/Nano.html","","<p>Load GNU Nano restricted mode\n"],["Tgio::Tgedit::Telegard","","Tgio/Tgedit/Telegard.html","","<p>The OpenTelegard ANSI Editor\n"],["Tglogin","","Tglogin.html","","<p>TODO: ALL SIGNUP NEEDS VALIDATION\n"],["Tglogin::Signup","","Tglogin/Signup.html","",""],["Tgmsg","","Tgmsg.html","","<p>Message Post Structure\n"],["Tgmsgarea","","Tgmsgarea.html","","<p>Messsages Area Structure\n"],["Tgtemplate","","Tgtemplate.html","","<p>begin rdoc               \n<p>Tgtemplate (Template)\n<p>Tgtemplate provides the wrapper for the FreeMarker template …\n"],["Tgtemplate::Fm","","Tgtemplate/Fm.html","","<p>Import of Java Class for FreeMarker Template Engine\n"],["Tgtemplate::Template","","Tgtemplate/Template.html","","<p>Template Class\n\n<pre>The template class. Used to create an instance of template from an action</pre>\n"],["TimebankController","","TimebankController.html","","<p>begin rdoc\n<p>TimebankController\n<p>The Timebank controller.\n"],["TrueClass","","TrueClass.html","","<p>Extends TrueClass for Boolean Functions\n"],["User","","User.html","","<p>User Class\n"],["UserController","","UserController.html","","<p>begin rdoc\n<p>UserController\n<p>The User controller handles user self-management functions.\n"],["activated_by?","Tgio::Output::Pager","Tgio/Output/Pager.html#method-i-activated_by-3F","(string_to_page)","<p>Determines if string should be paged based on configured width and height.\n"],["add","BBSlistController","BBSlistController.html#method-i-add","()","<p>Adds an entry to the local bbs list.\n"],["ansiclear","Tgio","Tgio.html#method-c-ansiclear","()","<p>The desired effect is to clear the screen\n"],["ansiprint","Tgio","Tgio.html#method-c-ansiprint","(text, fgcolor=ANSI_WHITE, bgcolor=ANSI_ON_BLACK)","<p>Print Output in a ANSI color block using Term::ANSIColor (DEPRECATED)\n"],["askaddress1","Tglogin::Signup","Tglogin/Signup.html#method-c-askaddress1","(val=nil)","<p>Asks user for their address line 1\n"],["askaddress2","Tglogin::Signup","Tglogin/Signup.html#method-c-askaddress2","(val=nil)","<p>Asks user for their address line 2\n"],["askbday","Tglogin::Signup","Tglogin/Signup.html#method-c-askbday","()","<p>Asks user for their bday YYYY/MM/DD\n"],["askcity","Tglogin::Signup","Tglogin/Signup.html#method-c-askcity","(val=nil)","<p>Asks user for their city\n"],["askcountry","Tglogin::Signup","Tglogin/Signup.html#method-c-askcountry","(val=nil)","<p>Asks user for their country\n"],["askcustom","Tglogin::Signup","Tglogin/Signup.html#method-c-askcustom","(num=1,val=nil)","<p>Asks user a operator designated question\n"],["askemail","Tglogin::Signup","Tglogin/Signup.html#method-c-askemail","(val=nil)","<p>Asks user for their email address\n"],["askfirstname","Tglogin::Signup","Tglogin/Signup.html#method-c-askfirstname","(val=nil)","<p>Asks user for their first name.\n"],["askgender","Tglogin::Signup","Tglogin/Signup.html#method-c-askgender","()","<p>Asks user for their gender\n"],["askhint","Tglogin","Tglogin.html#method-c-askhint","(login)",""],["asklastname","Tglogin::Signup","Tglogin/Signup.html#method-c-asklastname","(val=nil)","<p>Asks user for their last name.\n"],["asklogin","Tglogin::Signup","Tglogin/Signup.html#method-c-asklogin","(val=nil)","<p>Asks user for their login name or Alias.\n"],["askpassword","Tglogin::Signup","Tglogin/Signup.html#method-c-askpassword","()","<p>Asks user for their password.\n"],["askphone","Tglogin::Signup","Tglogin/Signup.html#method-c-askphone","(val=nil)","<p>Asks user for their phone\n"],["askpostal","Tglogin::Signup","Tglogin/Signup.html#method-c-askpostal","(val=nil)","<p>Asks user for their postalcode\n"],["askpwhint_answer","Tglogin::Signup","Tglogin/Signup.html#method-c-askpwhint_answer","(val=nil)","<p>Asks user for their pw hint answer\n"],["askpwhint_question","Tglogin::Signup","Tglogin/Signup.html#method-c-askpwhint_question","(val=nil)","<p>Asks user for their pw hint question\n"],["askstate","Tglogin::Signup","Tglogin/Signup.html#method-c-askstate","(val=nil)","<p>Asks user for their state\n"],["auth","Tglogin","Tglogin.html#method-c-auth","()","<p>This function provides the entire login routine logic. Configuration\nvariables apply.\n"],["authorize","User","User.html#method-c-authorize","(username, cleartxtpw)","<p>Authorize a user by name. Passes in cleartxt version of password\n"],["banner","Tgio::Tgedit::Telegard","Tgio/Tgedit/Telegard.html#method-i-banner","()","<p>Displays a banner before starting the editor with information on usage,\netc.\n"],["banner","Tglogin","Tglogin.html#method-c-banner","()","<p>Displays the template for the login banner.\n"],["browse","MessageController","MessageController.html#method-i-browse","()","<p>Allows a user to navigate (read) message area.\n"],["clearfailed","User","User.html#method-c-clearfailed","(username)","<p>Clear login_failures count on a user\n"],["confirm","Tglogin::Signup","Tglogin/Signup.html#method-c-confirm","(signupdata)","<p>Displays a confirmation screen and allows the caller to change their\naccount settings before creating …\n"],["connect","Tgdatabase","Tgdatabase.html#method-c-connect","(db)","<p>Create Database Connection based on type of either H2 Embedded or External\nRemote.\n"],["countlogin","User","User.html#method-c-countlogin","(username)","<p>Count the login by incrementing the DB login_count and timestamp of\nlogin_last\n"],["cryptpassword","Object","Object.html#method-i-cryptpassword","(mode, cleartxt)","<p>Encrypt Password with BCrypt\n"],["cryptpassword","Security::UserPassword","Security/UserPassword.html#method-i-cryptpassword","(cleartxt)","<p>Encrypt Password with BCrypt\n"],["cryptpassword","Tglogin","Tglogin.html#method-c-cryptpassword","(cleartxt)","<p>Encrypt the clear text password\n"],["cryptpassword","User","User.html#method-c-cryptpassword","(cleartxt)","<p>Encrypt Password with BCrypt\n"],["days","Integer","Integer.html#method-i-days","()","<p>Convert number of days to seconds (self)\n"],["decrypt","Security::ConfigPassword","Security/ConfigPassword.html#method-i-decrypt","(crypted)","<p>Decrypt using the BBS unique secret as the salt\n"],["default_pager","Tgio::Output::Pager","Tgio/Output/Pager.html#method-c-default_pager","(output, options={})","<p>Pages with a ruby-only pager which either pages, displays remaining or\nquits.\n"],["display","Tgtemplate","Tgtemplate.html#method-c-display","(template, hashdata=nil)","<p>Display a template file. If a hash is passed in, then variables will be\nsubstituted by FreeMarker.\n"],["edit","Tgio::Tgedit","Tgio/Tgedit.html#method-c-edit","(content=nil)","<p>Load the user&#39;s defined editor and returns content to the caller\n"],["edit","Tgio::Tgedit::Telegard","Tgio/Tgedit/Telegard.html#method-i-edit","()","<p>Run Editor Session\n"],["edit","UserController","UserController.html#method-i-edit","()","<p>Edit account menu\n"],["encrypt","Security::ConfigPassword","Security/ConfigPassword.html#method-i-encrypt","(cleartxt)","<p>Encrypt using the BBS unique secret as the salt\n"],["exec","Tgio::Tgedit::Nano","Tgio/Tgedit/Nano.html#method-i-exec","()","<p>Load filename using rnano\n"],["exists?","User","User.html#method-c-exists-3F","(username)","<p>Quick validation for login or other routines to see if a specified user\nexists\n"],["getcurgroup","Session","Session.html#method-i-getcurgroup","()","<p>Get group of current user and return instance.\n"],["getcuruser","Session","Session.html#method-i-getcuruser","()","<p>Get current user by login name and return instance.\n"],["getoptions","Object","Object.html#method-i-getoptions","(args)",""],["getpwentry","Object","Object.html#method-i-getpwentry","()","<p>Get the password text\n"],["goodbye","Telegard","Telegard.html#method-c-goodbye","()","<p>Defines normal goodbye\n"],["goodbye_fast","Telegard","Telegard.html#method-c-goodbye_fast","()","<p>Defines fast goodbye\n"],["hour","Integer","Integer.html#method-i-hour","()","<p>Alias for hours when using a single hour grammar\n"],["hours","Integer","Integer.html#method-i-hours","()","<p>Convert number of hours to seconds (self).\n"],["inbounds","String","String.html#method-i-inbounds","(min, max)","<p>Returns true if string size is within bounds.\n"],["inbox_list","EmailController","EmailController.html#method-i-inbox_list","()","<p>List contents of the user&#39;s Inbox\n"],["init","Telegard","Telegard.html#method-c-init","()","<p>Load the entire stack in the correct order. Use this method for anything\nthat requires full init\n"],["initdb","Tgdatabase","Tgdatabase.html#method-c-initdb","()","<p>&gt; Initialize the database (reserved)\n"],["inputdate","Tgio::Dates","Tgio/Dates.html#method-c-inputdate","()","<p>Inputs a date\n"],["inputday","Tgio::Dates","Tgio/Dates.html#method-c-inputday","()","<p>Input a day\n"],["inputeditline","Tgio::Input","Tgio/Input.html#method-c-inputeditline","(length=79)","<p>Same as inputform except supports line wrapping for use in Editor\n"],["inputform","Tgio::Input","Tgio/Input.html#method-c-inputform","(length)","<p>Displays a colored input bar of specified length and returns a value. This\nmay sound simple, but in order …\n"],["inputgender","Tgio::Input","Tgio/Input.html#method-c-inputgender","(template=nil)","<p>Displays a colored input bar of length 1 and returns a boolean based on a\nyes/no question. Only valid …\n"],["inputkey","Tgio::Input","Tgio/Input.html#method-c-inputkey","()","<p>Displays a colored input bar of length 2 and returns a value. Works similar\nto inputform, except does …\n"],["inputmonth","Tgio::Dates","Tgio/Dates.html#method-c-inputmonth","()","<p>Input a month\n"],["inputrow","Tgio::Tgedit::Telegard","Tgio/Tgedit/Telegard.html#method-i-inputrow","()","<p>Input a row of text and add it to the buffer until exit is called.\n"],["inputyear","Tgio::Dates","Tgio/Dates.html#method-c-inputyear","()","<p>Input a year\n"],["inputyn","Tgio::Input","Tgio/Input.html#method-c-inputyn","(template=nil)","<p>Displays a colored input bar of length 1 and returns a boolean based on a\nyes/no question. Only valid …\n"],["is_alpha?","String","String.html#method-i-is_alpha-3F","()","<p>Return true if string contains only Alpha characters\n"],["is_alphanumeric?","String","String.html#method-i-is_alphanumeric-3F","()","<p>Returns true if string is AlphaNumeric\n"],["is_blank?","String","String.html#method-i-is_blank-3F","()","<p>Returns true if string is Blank. Similar to empty, but looks for whitespace\nentries.\n"],["is_email?","String","String.html#method-i-is_email-3F","()","\n<pre>Returns true if string meets email address criteria\nPure Ruby way, replaced with Apache Commons Validator</pre>\n"],["is_notblank?","String","String.html#method-i-is_notblank-3F","()","<p>Returns true if string is NOT Blank.\n"],["is_numeric?","String","String.html#method-i-is_numeric-3F","()","<p>Returns true if string constains only Numeric characters\n"],["is_spaced_alpha?","String","String.html#method-i-is_spaced_alpha-3F","()","<p>Return true if string contains only Alpha characters\n"],["is_spaced_alphanumeric?","String","String.html#method-i-is_spaced_alphanumeric-3F","()","<p>Returns true if string is AlphaNumeric\n"],["is_spaced_numeric?","String","String.html#method-i-is_spaced_numeric-3F","()","<p>Returns true if string constains only Numeric characters\n"],["is_url?","String","String.html#method-i-is_url-3F","()","<p>Returns true if string is a valid url\n"],["is_valid?","Session","Session.html#method-i-is_valid-3F","()","<p>Check if the session is valid.\n"],["listall","MessageController","MessageController.html#method-i-listall","()","<p>Display summary listing of ALL message areas.\n"],["load","Tgconfig","Tgconfig.html#method-c-load","()","<p>Load in the YAML configuration file and returns\n"],["load_databaseconn","Telegard","Telegard.html#method-c-load_databaseconn","()","<p>Connect to the user specified DB engine &amp; load the Sequel models\n"],["load_tgconfig","Telegard","Telegard.html#method-c-load_tgconfig","()","<p>Loads configuration into a global $cfg variable\n"],["loadlib_security","Telegard","Telegard.html#method-c-loadlib_security","()","<p>Load Library: Security\n"],["loadlib_tgconfig","Telegard","Telegard.html#method-c-loadlib_tgconfig","()","<p>Load Library: Tgconfig\n"],["loadlib_tgconstants","Telegard","Telegard.html#method-c-loadlib_tgconstants","()","<p>Load the constants definition\n"],["loadlib_tgcontroller","Telegard","Telegard.html#method-c-loadlib_tgcontroller","()","<p>Load Library: Tgcontroller\n"],["loadlib_tgdatabase","Telegard","Telegard.html#method-c-loadlib_tgdatabase","()","<p>Load Library: Tgdatabase\n"],["loadlib_tgdatabasemodels","Telegard","Telegard.html#method-c-loadlib_tgdatabasemodels","()","<p>Load Library: Tgdatabase_models\n"],["loadlib_tgio","Telegard","Telegard.html#method-c-loadlib_tgio","()","<p>Load Library: Tgio\n"],["loadlib_tgtemplate","Telegard","Telegard.html#method-c-loadlib_tgtemplate","()","<p>Load Library: Tgtemplate\n"],["loginform","Tgio::Input","Tgio/Input.html#method-c-loginform","()","<p>Login Prompt\n"],["mainbanner","Tgio","Tgio.html#method-c-mainbanner","()","<p>AUDIT CODE: REPLACE WITH NEW TG COLORS Display the program&#39;s MAIN\nbanner\n"],["makedefault","Security::Config","Security/Config.html#method-i-makedefault","(filename)",""],["makedefault","Tgconfig","Tgconfig.html#method-c-makedefault","(filename)","<p>Builds a default YAML configuration and outputs the filename specified.\n"],["maxlength?","String","String.html#method-i-maxlength-3F","(size)","<p>Returns true if string meets maximum length\n"],["menu","BBSlistController","BBSlistController.html#method-i-menu","()",""],["menu","CallHistoryController","CallHistoryController.html#method-i-menu","()",""],["menu","ChatController","ChatController.html#method-i-menu","()",""],["menu","ChatRoomController","ChatRoomController.html#method-i-menu","()",""],["menu","EmailController","EmailController.html#method-i-menu","()","<p>Email main menu handler\n"],["menu","FileAreaController","FileAreaController.html#method-i-menu","()","<p>FileArea Menu Handler\n"],["menu","FileController","FileController.html#method-i-menu","()",""],["menu","HelpController","HelpController.html#method-i-menu","()",""],["menu","MainController","MainController.html#method-i-menu","()",""],["menu","MsgareaController","MsgareaController.html#method-i-menu","()",""],["menu","Tgio","Tgio.html#method-c-menu","(template)","<p>Displays menu from template and prompts user for inputkey.\n"],["menu","TimebankController","TimebankController.html#method-i-menu","()",""],["menu","UserController","UserController.html#method-i-menu","()","<p>Master menu for User Controller\n"],["menuprompt","Tgio::Input","Tgio/Input.html#method-c-menuprompt","(template, validkeys, menudata=nil)","<p>Menu Prompt: Recieve input restricted to a list of validkeys\n"],["minlength?","String","String.html#method-i-minlength-3F","(size)","<p>Returns true if string meets minimum length\n"],["minutes","Integer","Integer.html#method-i-minutes","()","<p>Convert number of minutes to seconds (self).\n"],["navigator","EmailController","EmailController.html#method-i-navigator","(folder)","<p>Email Navigator - a generic interface to reading email messages. Function\ntakes a “folder” …\n"],["new","CallHistoryController","CallHistoryController.html#method-c-new","()",""],["new","FileController","FileController.html#method-c-new","(curarea)",""],["new","MessageController","MessageController.html#method-c-new","(curarea)",""],["new","Security::ConfigPassword","Security/ConfigPassword.html#method-c-new","()",""],["new","Tgio::Output::Pager","Tgio/Output/Pager.html#method-c-new","(width=80, height=24)","<p>Create a new instance of Pager with defaults\n"],["new","Tgio::Tgedit::Nano","Tgio/Tgedit/Nano.html#method-c-new","(content=nil)",""],["new","Tgio::Tgedit::Telegard","Tgio/Tgedit/Telegard.html#method-c-new","()","<p>Create a new instance of the editor\n"],["new","Tgtemplate::Template","Tgtemplate/Template.html#method-c-new","filename","<p>Sets values when calling new method for a template\n"],["page","Tgio::Output::Pager","Tgio/Output/Pager.html#method-i-page","(string)","<p>Pages given string using configured pager.\n"],["pagerkey_default","Tgio::Input","Tgio/Input.html#method-c-pagerkey_default","()","<p>Same as &#39;inputkey&#39; method but for defaultpager\n"],["parse_content","Tgio::Tgedit::Nano","Tgio/Tgedit/Nano.html#method-i-parse_content","()","<p>Parse the content of @filename and return it\n"],["parse_dataset","Tgtemplate::Template","Tgtemplate/Template.html#method-c-parse_dataset","(sqlset)","<p>Parses an array of hashes created by a Sequel Dataset, and constructs a new\narray of JavaUtil::HashMap(s) …\n"],["parse_hash","Tgtemplate::Template","Tgtemplate/Template.html#method-c-parse_hash","(sqlset)",""],["passwordform","Tgio::Input","Tgio/Input.html#method-c-passwordform","()","<p>Password Prompt character reader. Replaces input with % for output.\n"],["passwordprompt","Tglogin","Tglogin.html#method-c-passwordprompt","()","<p>Password prompt - displays template, calls highline ask and returns crypted\npassword.\n"],["post","MessageController","MessageController.html#method-i-post","()","<p>Post a new message\n"],["preferences","UserController","UserController.html#method-i-preferences","()","<p>User Preferences menu\n"],["preview","Tgio::Tgedit::Telegard","Tgio/Tgedit/Telegard.html#method-i-preview","()","<p>Previews the lines, allowing the user to make a change before saving\n"],["printansifile","Tgio","Tgio.html#method-c-printansifile","(filename, paging=true, numlines=25)","<p>Print an ANSI graphic file (legacy - see Tgtemplate)\n"],["printreturn","Tgio","Tgio.html#method-c-printreturn","(retval)","<p>Print to stdout the result\n"],["printstart","Tgio","Tgio.html#method-c-printstart","(txt)","<p>Print to stdout that an item is starting\n"],["question","Tgio","Tgio.html#method-c-question","(template, inputsize)","<p>Asks user a question. Wraps display of a template and inputform.\n"],["quote","MessageController","MessageController.html#method-i-quote","(original)","<p>Add quote notation to original message for use in reply\n"],["read_msg","EmailController","EmailController.html#method-i-read_msg","()","<p>Interactive Message Reader\n"],["render","Tgtemplate::Template","Tgtemplate/Template.html#method-i-render","(data={})","<p>Renders the template to stdout\n"],["reply","MessageController","MessageController.html#method-i-reply","(msgid)","<p>Reply to a new message\n"],["run_pager","Tgio","Tgio.html#method-c-run_pager","()","<p>Paging Function to incorporate scrolling into program\n<p>adapted from code written by : Nathan Weizenbaum …\n"],["sec_to_min","Integer","Integer.html#method-i-sec_to_min","()","<p>Convert Seconds to Minutes\n"],["seconds","Integer","Integer.html#method-i-seconds","()","<p>Default fixnum class is in seconds (self).\n"],["select_editor","UserController","UserController.html#method-i-select_editor","()",""],["setexpiration","Session","Session.html#method-i-setexpiration","()","<p>Set the session expiration time. This is determined Based on the amount of\nuser&#39;s daily alloted time, …\n"],["signup","Tglogin","Tglogin.html#method-c-signup","()","<p>Signup routine for New Users\n"],["stringify","Tgtemplate::Template","Tgtemplate/Template.html#method-i-stringify","(data={})","<p>Renders the template to a string so it may be paged using the Pager\nfacility\n"],["terminaldetect","Tgio","Tgio.html#method-c-terminaldetect","()","<p>Terminal detection to determine support, dimensions, etc.\n"],["test_session","Tgcontroller","Tgcontroller.html#method-i-test_session","()","<p>This is executed before all other statements are allowed\n"],["thisuser_logincount_today","Tgcallhistory","Tgcallhistory.html#method-i-thisuser_logincount_today","(uid = self.user_id)","<p>Calculates the total login count for a specific user by id in a 24hour\nperiod\n"],["thisuser_time_today","Tgcallhistory","Tgcallhistory.html#method-i-thisuser_time_today","(uid = self.user_id)","<p>Calculates the total time a specific user by id has spent in callhistory in\na 24hour period\n"],["timeremain","Session","Session.html#method-i-timeremain","()","<p>Returns value of session&#39;s remaining time in minutes\n"],["toggle","FalseClass","FalseClass.html#method-i-toggle","()","<p>Flip the bit on a Boolean - False becomes True\n"],["toggle","TrueClass","TrueClass.html#method-i-toggle","()","<p>Flip the bit on a Boolean - True becomes False\n"],["unimplemented","Telegard","Telegard.html#method-c-unimplemented","()","<p>Prints a message when a feature is currently not implemented\n"],["uninitialize","FileController","FileController.html#method-i-uninitialize","()",""],["uninitialize","MessageController","MessageController.html#method-i-uninitialize","()",""],["userprompt","Tglogin","Tglogin.html#method-c-userprompt","()","<p>Username prompt - displays template, calls highline ask and returns\nusername.\n"],["validate","Security::UserPassword","Security/UserPassword.html#method-i-validate","(input,stored)","<p>Validate a user password stored vs input\n"],["validatepw","User","User.html#method-c-validatepw","(pw1, pw2)","<p>Simple validator to compare 2 passwords in any presented format\n"],["view","MessageController","MessageController.html#method-i-view","(msgmeta)","<p>View current message\n"],["LICENSE","","LICENSE.html","","<p>\n\n<pre>OpenTG (Telegard/2)  http://www.opentg.org</pre>\n<p>\n"],["README","","README.html","","<p>OpenTG : Telegard/2 BBS\n<p>\n\n<pre>OpenTG (Telegard/2)  http://www.opentg.org</pre>\n"]]}}